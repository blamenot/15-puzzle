{"version":3,"sources":["constants/actionTypes.js","reducers/reducers.js","actions/actions.js","components/tools.js","components/tile.js","components/tiles.js","App.js","serviceWorker.js","index.js"],"names":["MOVE_TILE","UNDO_MOVE","REDO_MOVE","RESET","getDefaultState","tilesState","sequnceSum","_","shuffle","i","length","k","Math","trunc","past","present","future","saveState","state","window","localStorage","setItem","JSON","stringify","reducer","arguments","undefined","getItem","parse","e","console","error","removeItem","getState","action","type","push","updatedTilesState","slice","indexOf","tileIndex","Object","assign","pop","moveTile","types","undoMove","redoMove","reset","Tools","react_default","a","createElement","className","disabled","this","props","hasPast","onClick","onUndo","hasFuture","onRedo","onReset","Component","connect","dispatch","Tile","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","left","index","top","cursor","clickable","onMoveTile","number","style","getStyle","Tiles","getTile","isClickable","tiles","tile","key","map","App","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","es","tools","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dd99a15b.chunk.js","sourcesContent":["export const MOVE_TILE = 'MOVE_TILE'\nexport const UNDO_MOVE = 'UNDO_MOVE'\nexport const REDO_MOVE = 'REDO_MOVE'\nexport const RESET = 'RESET'","import _ from 'underscore'\nimport {\n    MOVE_TILE,\n    UNDO_MOVE,\n    REDO_MOVE,\n    RESET\n  } from '../constants/actionTypes'\n\n/**\n * Default state with shuffled tiles\n * @returns {Object} default state\n */\nfunction getDefaultState() {\n    let sequnceSum = 1, tilesState\n    while (sequnceSum % 2 === 1) {\n        tilesState = _.shuffle([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n        //check Solvability http://pyatnashki.wmsite.ru/kombinacyi\n        for(let i = 0; i < tilesState.length - 1; i++) {\n            if(tilesState[i] === 0) {\n                sequnceSum += Math.trunc(i/4) + 1\n                continue;\n            }\n            for(let k = i + 1; k < tilesState.length; k++) {\n                tilesState[i] > tilesState[k] && tilesState[k] !== 0 && sequnceSum++\n            }\n        }\n    }\n    return {\n        past:[],\n        present: tilesState,\n        future: []\n    }\n}\n/**\n * Saves state to local storage;\n * @param {Object} state Current redux state\n */\nfunction saveState(state) {\n    window.localStorage.setItem('state', JSON.stringify(state));\n}\n/**\n * Tries to parse state from local storage if unavalable returns default\n * @returns {Object} restored or default state\n */\nfunction getState() {\n    let state\n    try {\n        state = localStorage.getItem('state') \n            &&  JSON.parse(localStorage.getItem('state'))\n    } catch (e) {\n        console.error(e)\n        localStorage.removeItem('state')\n    }\n\n    return state || getDefaultState()\n}\nexport default function reducer (state = getState(), action) {\n    switch(action.type) {\n        case MOVE_TILE: {\n            //preserve state\n            state.past.push(state.present)\n            //Create copy\n            let updatedTilesState = state.present.slice()\n            //Exchange tile following tile elements 0 and at tileIndex\n            updatedTilesState[updatedTilesState.indexOf(0)] = updatedTilesState[action.tileIndex];\n            updatedTilesState[action.tileIndex] = 0\n            state.present = updatedTilesState;\n            //future COLLAPSED!!!\n            state.future = []\n            //save\n            saveState(state);\n            //fresh state copy\n            return Object.assign({}, state)\n        }\n        case UNDO_MOVE:\n            if(state.past.length){\n                state.future.push(state.present)\n                state.present = state.past.pop()\n                //save\n                saveState(state);\n                //fresh state copy\n                return Object.assign({}, state)\n            } else {\n                return state\n            }\n        case REDO_MOVE:\n            if(state.future.length){\n                state.past.push(state.present)\n                state.present = state.future.pop()\n                //save\n                saveState(state)\n                //fresh state copy\n                return Object.assign({}, state)\n            } else {\n                return state\n            }\n        case RESET: {\n            //clear current state\n            let state = getDefaultState()\n            //save new cleared state\n            saveState(state)\n            return state\n        }\n        default:\n            return state\n    }\n}\n","import * as types from '../constants/actionTypes'\n\nexport const moveTile = tileIndex => ({type: types.MOVE_TILE, tileIndex})\nexport const undoMove = () => ({type: types.UNDO_MOVE})\nexport const redoMove = () => ({type: types.REDO_MOVE})\nexport const reset = () => ({type: types.RESET})","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {undoMove, redoMove, reset} from '../actions/actions'\nclass Tools extends Component {\n    render() {\n        return (\n            <div className='tool-box'>\n                <button className=\"tool\" disabled={!this.props.hasPast} onClick={this.props.onUndo}>☜</button>\n                <button className=\"tool\" disabled={!this.props.hasFuture} onClick={this.props.onRedo}>☞</button>\n                <button className=\"tool\" onClick={this.props.onReset}>&#x21bb;</button>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToPorps(state) {\n    return {\n        hasPast: state.past.length,\n        hasFuture: state.future.length\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        onUndo: () =>  dispatch(undoMove()),\n        onRedo: () =>  dispatch(redoMove()),\n        onReset: () => dispatch(reset())\n    }\n}\nexport default connect(mapStateToPorps, mapDispatchToProps)(Tools)","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {moveTile} from '../actions/actions'\nclass Tile extends Component{\n    constructor(props) {\n        super(props)\n        this.onClick = this.onClick.bind(this)\n    }\n    /**\n     * Evalute cordinates for the tile\n     * @returns {Object} Object containing left and top properties, values specified in %\n     */\n    getStyle() {\n        return {\n            left: (this.props.index % 4 * 25) + '%',\n            top: (Math.trunc(this.props.index/4) * 25) + '%',\n            cursor: this.props.clickable ? 'pointer' : 'default'\n        }\n    }\n    /**\n     * Click Handler\n     */\n    onClick() {\n        //Move tile only if it has clickable prop\n        if(this.props.clickable) {\n            this.props.onMoveTile(this.props.index)\n        }\n    }\n    render() {\n        if(this.props.number)\n            return(\n                    <div onClick={this.onClick} className=\"tile\" style={this.getStyle()}><span>{this.props.number}</span></div>\n            )\n        else\n            return null\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        onMoveTile: tileIndex =>  dispatch(moveTile(tileIndex))\n    }\n}\nexport default connect(()=>{return {}}, mapDispatchToProps)(Tile)","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Tile from './tile'\nclass Tiles extends Component {\n    constructor(props) {\n        super(props)\n        this.getTile = this.getTile.bind(this)\n    }\n    /**\n     * Inits Tile component for array element\n     * @param {Number} number tp be displayed within the tile\n     * @param {Number} position 0-15, is used to evaluate position on the Tiles board\n     * @returns {Tile} Tile instance ready to display\n     */\n    getTile(number, index) {\n        //Tile is clickable only if it has the 0 tile on top, below, right or left.  \n        let isClickable = this.props.tiles[index - 1] === 0\n                        ||this.props.tiles[index + 1] === 0\n                        ||this.props.tiles[index - 4] === 0\n                        ||this.props.tiles[index + 4] === 0\n        return (<Tile key={number} number={number} index={index} clickable={isClickable}/>)\n    }\n    render() {\n        return (\n            <div className=\"tiles\">\n                {this.props.tiles.map(this.getTile)}\n            </div>\n        )\n    }\n}\n\nfunction mapStateToPorps(state) {\n    return {\n        tiles: state.present\n    };\n}\nexport default connect(mapStateToPorps)(Tiles)","import React, { Component } from 'react'\nimport './App.css'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport reducer from './reducers/reducers'\nimport Tools from './components/tools'\nimport Tiles from './components/tiles'\n\nclass App extends Component {\n    render() {\n        const store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n        return (\n            <Provider store={store}>\n                <Tiles />\n                <Tools />\n            </Provider>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}